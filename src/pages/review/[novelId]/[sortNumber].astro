---
import Layout from '../../../layouts/Layout.astro';
import { getCollection, render } from 'astro:content';
import { getNovelById } from '../../../utils/novels';
import '../../../styles/markdown.scss';

export async function getStaticPaths() {
  const reviews = await getCollection('review');
  return reviews.map((review) => ({
    params: {
      novelId: review.data.novelId,
      sortNumber: review.data.sortNumber.toString(),
    },
    props: { entry: review },
  }));
}

const { entry } = Astro.props;
const { Content } = await render(entry);
const novel = getNovelById(entry.data.novelId);

const levelText = {
  spoilerSafe: 'ネタバレなし',
  spoilerAlert: 'ネタバレあり',
  techniqueReview: '技法レビュー',
};
---

<Layout 
  title={entry.data.title} 
  description={`${novel?.name || ''}のレビュー記事`}
>
  <article class="container-narrow review-article">
    <header class="article-header">
      {novel && (
        <div class="novel-link">
          <a href={`/novel/${novel.id}`}>← {novel.name}</a>
        </div>
      )}
      
      <h1>{entry.data.title}</h1>
      
      <div class="article-meta">
        <time datetime={entry.data.publishedAt.toISOString()}>
          公開: {entry.data.publishedAt.toLocaleDateString('ja-JP')}
        </time>
        {entry.data.updatedAt && (
          <time datetime={entry.data.updatedAt.toISOString()}>
            更新: {entry.data.updatedAt.toLocaleDateString('ja-JP')}
          </time>
        )}
        <span class="level-badge">
          {levelText[entry.data.level]}
        </span>
      </div>
    </header>

    <div class="markdown-content">
      <Content />
    </div>

    <footer class="article-footer">
      {novel && (
        <a href={`/novel/${novel.id}`} class="back-link">
          ← {novel.name}のページに戻る
        </a>
      )}
    </footer>
  </article>
</Layout>

<style lang="scss">
  @import '../../../styles/variables.scss';

  .review-article {
    padding: $spacing-2xl 0;
  }

  .article-header {
    margin-bottom: $spacing-2xl;
    padding-bottom: $spacing-xl;
    border-bottom: 2px solid var(--color-border);
  }

  .novel-link {
    margin-bottom: $spacing-lg;

    a {
      color: var(--color-highlight);
      text-decoration: none;
      font-size: $font-size-sm;

      &:hover {
        text-decoration: underline;
      }
    }
  }

  h1 {
    font-size: $font-size-3xl;
    margin-bottom: $spacing-lg;
    line-height: 1.3;
  }

  .article-meta {
    display: flex;
    gap: $spacing-lg;
    flex-wrap: wrap;
    font-size: $font-size-sm;
    color: var(--color-text-secondary);

    time {
      display: inline-block;
    }

    .level-badge {
      padding: $spacing-xs $spacing-md;
      background-color: var(--color-accent);
      color: var(--color-text);
      border-radius: $radius-sm;
      font-weight: 600;
    }
  }

  .article-footer {
    margin-top: $spacing-2xl * 1.5;
    padding-top: $spacing-xl;
    border-top: 2px solid var(--color-border);

    .back-link {
      display: inline-block;
      padding: $spacing-sm $spacing-lg;
      background-color: var(--color-highlight);
      color: var(--color-secondary);
      border-radius: $radius-md;
      text-decoration: none;
      font-weight: 600;
      transition: background-color 0.2s ease;

      &:hover {
        background-color: var(--color-accent);
        color: var(--color-text);
        text-decoration: none;
      }
    }
  }
</style>

